-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backsub is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of backsub is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "backsub,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=230431,HLS_SYN_TPT=none,HLS_SYN_MEM=256,HLS_SYN_DSP=13,HLS_SYN_FF=3282,HLS_SYN_LUT=5048}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_pp0_stg0_fsm_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_st12_fsm_9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_pp1_stg0_fsm_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_pp2_stg0_fsm_11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_st40_fsm_12 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_pp3_stg0_fsm_13 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_st44_fsm_14 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_st45_fsm_15 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_st46_fsm_16 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_st47_fsm_17 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_st48_fsm_18 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_12C00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010010110000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3DCCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011001100110011001101";
    constant ap_const_lv32_3E4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111110010011001100110011001101";
    constant ap_const_lv32_3F333333 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001100110011001100110011";
    constant ap_const_lv17_12C00 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1D : STD_LOGIC_VECTOR (8 downto 0) := "000011101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal frame_in : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_out : STD_LOGIC_VECTOR (31 downto 0);
    signal init : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal backsub_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal backsub_CRTL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal backsub_gmem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_296 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_indvar_reg_296_pp0_it1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond8_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_259 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal i1_reg_308 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_reg_319 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar1_reg_330 : STD_LOGIC_VECTOR (16 downto 0);
    signal init_read_read_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal init_read_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame_out_read_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_in_read_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_289 : BOOLEAN;
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond8_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond8_reg_662_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_396_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_next_reg_666 : STD_LOGIC_VECTOR (16 downto 0);
    signal gmem_addr_1_read_reg_671 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_314 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it24 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_676_pp1_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_413_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_685_pp1_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal frame1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal val1_reg_703 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it7 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it11 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it12 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it13 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it14 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it15 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it16 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it17 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it19 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it20 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it21 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val1_reg_703_pp1_it22 : STD_LOGIC_VECTOR (7 downto 0);
    signal frame2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal val2_reg_710 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val2_reg_710_pp1_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val2_reg_710_pp1_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val2_reg_710_pp1_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_val2_reg_710_pp1_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal frame3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal val3_reg_731 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_reg_776 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_1_fu_451_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_782 : STD_LOGIC_VECTOR (22 downto 0);
    signal result_V_fu_546_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_787 : STD_LOGIC_VECTOR (7 downto 0);
    signal not_tmp_s_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_556 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal i_1_fu_606_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_806 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_818 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_578 : BOOLEAN;
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal exitcond2_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_591 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond2_reg_823_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp3_it2 : STD_LOGIC := '0';
    signal indvar_next1_fu_627_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_load_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_629 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_636 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_648 : BOOLEAN;
    signal frame1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal frame1_ce0 : STD_LOGIC;
    signal frame1_we0 : STD_LOGIC;
    signal frame1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frame2_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal frame2_ce0 : STD_LOGIC;
    signal frame2_we0 : STD_LOGIC;
    signal frame2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frame2_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal frame2_ce1 : STD_LOGIC;
    signal frame2_we1 : STD_LOGIC;
    signal frame2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal frame3_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal frame3_ce0 : STD_LOGIC;
    signal frame3_we0 : STD_LOGIC;
    signal frame3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frame3_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal frame3_ce1 : STD_LOGIC;
    signal frame3_we1 : STD_LOGIC;
    signal frame3_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_phi_fu_300_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st48_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_767 : BOOLEAN;
    signal p_cast_fu_592_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_367_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_455_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_cast2_fu_466_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_475_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_cast_fu_488_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_492_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_504_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_462_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_6_i_i_fu_508_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_i_i_fu_512_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_518_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_20_fu_532_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_536_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_cast_fu_554_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_cast_fu_557_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_560_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_566_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_fu_578_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_341_ce : STD_LOGIC;
    signal grp_fu_345_ce : STD_LOGIC;
    signal grp_fu_349_ce : STD_LOGIC;
    signal grp_fu_354_ce : STD_LOGIC;
    signal grp_fu_359_ce : STD_LOGIC;
    signal grp_fu_364_ce : STD_LOGIC;
    signal grp_fu_367_ce : STD_LOGIC;
    signal grp_fu_370_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_bdd_737 : BOOLEAN;

    component backsub_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backsub_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backsub_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backsub_frame1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component backsub_frame2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component backsub_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        frame_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backsub_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        init : OUT STD_LOGIC );
    end component;


    component backsub_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    backsub_AXILiteS_s_axi_U : component backsub_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => backsub_AXILiteS_s_axi_U_ap_dummy_ce,
        frame_in => frame_in,
        frame_out => frame_out);

    backsub_CRTL_BUS_s_axi_U : component backsub_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => backsub_CRTL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        init => init);

    backsub_gmem_m_axi_U : component backsub_gmem_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => backsub_gmem_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    frame1_U : component backsub_frame1
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => frame1_address0,
        ce0 => frame1_ce0,
        we0 => frame1_we0,
        d0 => frame1_d0,
        q0 => frame1_q0);

    frame2_U : component backsub_frame2
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => frame2_address0,
        ce0 => frame2_ce0,
        we0 => frame2_we0,
        d0 => frame2_d0,
        q0 => frame2_q0,
        address1 => frame2_address1,
        ce1 => frame2_ce1,
        we1 => frame2_we1,
        d1 => frame2_d1);

    frame3_U : component backsub_frame2
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => frame3_address0,
        ce0 => frame3_ce0,
        we0 => frame3_we0,
        d0 => frame3_d0,
        q0 => frame3_q0,
        address1 => frame3_address1,
        ce1 => frame3_ce1,
        we1 => frame3_we1,
        d1 => frame3_d1);

    out_U : component backsub_frame1
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);

    backsub_fadd_32ns_32ns_32_5_full_dsp_U1 : component backsub_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_9_reg_751,
        din1 => tmp_12_reg_756,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    backsub_fadd_32ns_32ns_32_5_full_dsp_U2 : component backsub_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_13_reg_766,
        din1 => tmp_16_reg_771,
        ce => grp_fu_345_ce,
        dout => grp_fu_345_p2);

    backsub_fmul_32ns_32ns_32_4_max_dsp_U3 : component backsub_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_reg_736,
        din1 => ap_const_lv32_3DCCCCCD,
        ce => grp_fu_349_ce,
        dout => grp_fu_349_p2);

    backsub_fmul_32ns_32ns_32_4_max_dsp_U4 : component backsub_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_11_reg_741,
        din1 => ap_const_lv32_3E4CCCCD,
        ce => grp_fu_354_ce,
        dout => grp_fu_354_p2);

    backsub_fmul_32ns_32ns_32_4_max_dsp_U5 : component backsub_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_15_reg_761,
        din1 => ap_const_lv32_3F333333,
        ce => grp_fu_359_ce,
        dout => grp_fu_359_p2);

    backsub_sitofp_32ns_32_6_U6 : component backsub_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_364_p0,
        ce => grp_fu_364_ce,
        dout => grp_fu_364_p1);

    backsub_sitofp_32ns_32_6_U7 : component backsub_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_367_p0,
        ce => grp_fu_367_ce,
        dout => grp_fu_367_p1);

    backsub_sitofp_32ns_32_6_U8 : component backsub_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_370_p0,
        ce => grp_fu_370_ce,
        dout => grp_fu_370_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_ARREADY assign process. --
    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_ARREADY)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_AWREADY assign process. --
    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_WREADY assign process. --
    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_737) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond8_fu_390_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond8_fu_390_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond8_fu_390_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_407_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = init_read_reg_638))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_lv1_0 = exitcond_fu_407_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = init_read_reg_638)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_407_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it10 assign process. --
    ap_reg_ppiten_pp1_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it11 assign process. --
    ap_reg_ppiten_pp1_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it12 assign process. --
    ap_reg_ppiten_pp1_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it13 assign process. --
    ap_reg_ppiten_pp1_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it14 assign process. --
    ap_reg_ppiten_pp1_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it15 assign process. --
    ap_reg_ppiten_pp1_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it15 <= ap_reg_ppiten_pp1_it14;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it16 assign process. --
    ap_reg_ppiten_pp1_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it16 <= ap_reg_ppiten_pp1_it15;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it17 assign process. --
    ap_reg_ppiten_pp1_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it17 <= ap_reg_ppiten_pp1_it16;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it18 assign process. --
    ap_reg_ppiten_pp1_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it18 <= ap_reg_ppiten_pp1_it17;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it19 assign process. --
    ap_reg_ppiten_pp1_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it19 <= ap_reg_ppiten_pp1_it18;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it20 assign process. --
    ap_reg_ppiten_pp1_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it20 <= ap_reg_ppiten_pp1_it19;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it21 assign process. --
    ap_reg_ppiten_pp1_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it21 <= ap_reg_ppiten_pp1_it20;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it22 assign process. --
    ap_reg_ppiten_pp1_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it22 <= ap_reg_ppiten_pp1_it21;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it23 assign process. --
    ap_reg_ppiten_pp1_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it23 <= ap_reg_ppiten_pp1_it22;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it24 assign process. --
    ap_reg_ppiten_pp1_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it24 <= ap_reg_ppiten_pp1_it23;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it7 assign process. --
    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it8 assign process. --
    ap_reg_ppiten_pp1_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it9 assign process. --
    ap_reg_ppiten_pp1_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not((ap_const_lv1_0 = exitcond1_fu_600_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((ap_const_lv1_0 = init_read_reg_638)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_lv1_0 = exitcond1_fu_600_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((ap_const_lv1_0 = init_read_reg_638))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and not((ap_const_lv1_0 = exitcond1_fu_600_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond2_fu_621_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and (ap_const_lv1_0 = exitcond2_fu_621_p2))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond2_fu_621_p2))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it2 assign process. --
    ap_reg_ppiten_pp3_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))) then 
                    ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                    ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i1_reg_308 assign process. --
    i1_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = init_read_reg_638))) then 
                i1_reg_308 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_fu_407_p2))) then 
                i1_reg_308 <= i_2_fu_413_p2;
            end if; 
        end if;
    end process;

    -- i_reg_319 assign process. --
    i_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and not((ap_const_lv1_0 = init_read_reg_638)))) then 
                i_reg_319 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = exitcond1_fu_600_p2))) then 
                i_reg_319 <= i_1_fu_606_p2;
            end if; 
        end if;
    end process;

    -- indvar1_reg_330 assign process. --
    indvar1_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and (ap_const_lv1_0 = exitcond2_fu_621_p2))) then 
                indvar1_reg_330 <= indvar_next1_fu_627_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                indvar1_reg_330 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_296 assign process. --
    indvar_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond8_reg_662 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_296 <= indvar_next_reg_666;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                indvar_reg_296 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))))) then
                ap_reg_ppstg_exitcond2_reg_823_pp3_it1 <= exitcond2_reg_823;
                exitcond2_reg_823 <= exitcond2_fu_621_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond8_reg_662_pp0_it1 <= exitcond8_reg_662;
                ap_reg_ppstg_indvar_reg_296_pp0_it1 <= indvar_reg_296;
                exitcond8_reg_662 <= exitcond8_fu_390_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10)) then
                ap_reg_ppstg_exitcond_reg_676_pp1_it1 <= exitcond_reg_676;
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it1(16 downto 0) <= tmp_6_reg_685(16 downto 0);
                exitcond_reg_676 <= exitcond_fu_407_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_reg_676_pp1_it10 <= ap_reg_ppstg_exitcond_reg_676_pp1_it9;
                ap_reg_ppstg_exitcond_reg_676_pp1_it11 <= ap_reg_ppstg_exitcond_reg_676_pp1_it10;
                ap_reg_ppstg_exitcond_reg_676_pp1_it12 <= ap_reg_ppstg_exitcond_reg_676_pp1_it11;
                ap_reg_ppstg_exitcond_reg_676_pp1_it13 <= ap_reg_ppstg_exitcond_reg_676_pp1_it12;
                ap_reg_ppstg_exitcond_reg_676_pp1_it14 <= ap_reg_ppstg_exitcond_reg_676_pp1_it13;
                ap_reg_ppstg_exitcond_reg_676_pp1_it15 <= ap_reg_ppstg_exitcond_reg_676_pp1_it14;
                ap_reg_ppstg_exitcond_reg_676_pp1_it16 <= ap_reg_ppstg_exitcond_reg_676_pp1_it15;
                ap_reg_ppstg_exitcond_reg_676_pp1_it17 <= ap_reg_ppstg_exitcond_reg_676_pp1_it16;
                ap_reg_ppstg_exitcond_reg_676_pp1_it18 <= ap_reg_ppstg_exitcond_reg_676_pp1_it17;
                ap_reg_ppstg_exitcond_reg_676_pp1_it19 <= ap_reg_ppstg_exitcond_reg_676_pp1_it18;
                ap_reg_ppstg_exitcond_reg_676_pp1_it2 <= ap_reg_ppstg_exitcond_reg_676_pp1_it1;
                ap_reg_ppstg_exitcond_reg_676_pp1_it20 <= ap_reg_ppstg_exitcond_reg_676_pp1_it19;
                ap_reg_ppstg_exitcond_reg_676_pp1_it21 <= ap_reg_ppstg_exitcond_reg_676_pp1_it20;
                ap_reg_ppstg_exitcond_reg_676_pp1_it22 <= ap_reg_ppstg_exitcond_reg_676_pp1_it21;
                ap_reg_ppstg_exitcond_reg_676_pp1_it23 <= ap_reg_ppstg_exitcond_reg_676_pp1_it22;
                ap_reg_ppstg_exitcond_reg_676_pp1_it3 <= ap_reg_ppstg_exitcond_reg_676_pp1_it2;
                ap_reg_ppstg_exitcond_reg_676_pp1_it4 <= ap_reg_ppstg_exitcond_reg_676_pp1_it3;
                ap_reg_ppstg_exitcond_reg_676_pp1_it5 <= ap_reg_ppstg_exitcond_reg_676_pp1_it4;
                ap_reg_ppstg_exitcond_reg_676_pp1_it6 <= ap_reg_ppstg_exitcond_reg_676_pp1_it5;
                ap_reg_ppstg_exitcond_reg_676_pp1_it7 <= ap_reg_ppstg_exitcond_reg_676_pp1_it6;
                ap_reg_ppstg_exitcond_reg_676_pp1_it8 <= ap_reg_ppstg_exitcond_reg_676_pp1_it7;
                ap_reg_ppstg_exitcond_reg_676_pp1_it9 <= ap_reg_ppstg_exitcond_reg_676_pp1_it8;
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it10(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it9(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it11(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it10(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it12(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it11(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it13(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it12(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it14(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it13(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it15(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it14(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it16(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it15(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it17(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it16(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it18(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it17(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it19(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it18(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it2(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it1(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it20(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it19(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it21(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it20(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it22(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it21(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it23(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it22(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it3(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it2(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it4(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it3(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it5(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it4(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it6(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it5(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it7(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it6(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it8(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it7(16 downto 0);
                    ap_reg_ppstg_tmp_6_reg_685_pp1_it9(16 downto 0) <= ap_reg_ppstg_tmp_6_reg_685_pp1_it8(16 downto 0);
                ap_reg_ppstg_val1_reg_703_pp1_it10 <= ap_reg_ppstg_val1_reg_703_pp1_it9;
                ap_reg_ppstg_val1_reg_703_pp1_it11 <= ap_reg_ppstg_val1_reg_703_pp1_it10;
                ap_reg_ppstg_val1_reg_703_pp1_it12 <= ap_reg_ppstg_val1_reg_703_pp1_it11;
                ap_reg_ppstg_val1_reg_703_pp1_it13 <= ap_reg_ppstg_val1_reg_703_pp1_it12;
                ap_reg_ppstg_val1_reg_703_pp1_it14 <= ap_reg_ppstg_val1_reg_703_pp1_it13;
                ap_reg_ppstg_val1_reg_703_pp1_it15 <= ap_reg_ppstg_val1_reg_703_pp1_it14;
                ap_reg_ppstg_val1_reg_703_pp1_it16 <= ap_reg_ppstg_val1_reg_703_pp1_it15;
                ap_reg_ppstg_val1_reg_703_pp1_it17 <= ap_reg_ppstg_val1_reg_703_pp1_it16;
                ap_reg_ppstg_val1_reg_703_pp1_it18 <= ap_reg_ppstg_val1_reg_703_pp1_it17;
                ap_reg_ppstg_val1_reg_703_pp1_it19 <= ap_reg_ppstg_val1_reg_703_pp1_it18;
                ap_reg_ppstg_val1_reg_703_pp1_it2 <= val1_reg_703;
                ap_reg_ppstg_val1_reg_703_pp1_it20 <= ap_reg_ppstg_val1_reg_703_pp1_it19;
                ap_reg_ppstg_val1_reg_703_pp1_it21 <= ap_reg_ppstg_val1_reg_703_pp1_it20;
                ap_reg_ppstg_val1_reg_703_pp1_it22 <= ap_reg_ppstg_val1_reg_703_pp1_it21;
                ap_reg_ppstg_val1_reg_703_pp1_it3 <= ap_reg_ppstg_val1_reg_703_pp1_it2;
                ap_reg_ppstg_val1_reg_703_pp1_it4 <= ap_reg_ppstg_val1_reg_703_pp1_it3;
                ap_reg_ppstg_val1_reg_703_pp1_it5 <= ap_reg_ppstg_val1_reg_703_pp1_it4;
                ap_reg_ppstg_val1_reg_703_pp1_it6 <= ap_reg_ppstg_val1_reg_703_pp1_it5;
                ap_reg_ppstg_val1_reg_703_pp1_it7 <= ap_reg_ppstg_val1_reg_703_pp1_it6;
                ap_reg_ppstg_val1_reg_703_pp1_it8 <= ap_reg_ppstg_val1_reg_703_pp1_it7;
                ap_reg_ppstg_val1_reg_703_pp1_it9 <= ap_reg_ppstg_val1_reg_703_pp1_it8;
                ap_reg_ppstg_val2_reg_710_pp1_it2 <= val2_reg_710;
                ap_reg_ppstg_val2_reg_710_pp1_it3 <= ap_reg_ppstg_val2_reg_710_pp1_it2;
                ap_reg_ppstg_val2_reg_710_pp1_it4 <= ap_reg_ppstg_val2_reg_710_pp1_it3;
                ap_reg_ppstg_val2_reg_710_pp1_it5 <= ap_reg_ppstg_val2_reg_710_pp1_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11)) then
                exitcond1_reg_797 <= exitcond1_fu_600_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                frame_in_read_reg_647 <= frame_in;
                frame_out_read_reg_642 <= frame_out;
                init_read_reg_638 <= init_read_read_fu_152_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond8_reg_662 = ap_const_lv1_0) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                gmem_addr_1_read_reg_671 <= gmem_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_666 <= indvar_next_fu_396_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it20)) then
                loc_V_1_reg_782 <= loc_V_1_fu_451_p1;
                loc_V_reg_776 <= p_Val2_s_fu_437_p1(30 downto 23);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it22)) then
                not_tmp_s_reg_792 <= not_tmp_s_fu_586_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and (ap_const_lv1_0 = exitcond2_reg_823))) then
                out_load_reg_837 <= out_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it21)) then
                result_V_reg_787 <= result_V_fu_546_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it6)) then
                tmp_11_reg_741 <= grp_fu_367_p1;
                tmp_8_reg_736 <= grp_fu_364_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it10)) then
                tmp_12_reg_756 <= grp_fu_354_p2;
                tmp_9_reg_751 <= grp_fu_349_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it15)) then
                tmp_13_reg_766 <= grp_fu_341_p2;
                tmp_16_reg_771 <= grp_fu_359_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it11)) then
                tmp_15_reg_761 <= grp_fu_370_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) then
                tmp_17_reg_652 <= tmp_17_fu_386_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then
                tmp_18_reg_818 <= tmp_18_fu_617_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_lv1_0 = exitcond1_fu_600_p2))) then
                    tmp_4_reg_806(16 downto 0) <= tmp_4_fu_612_p1(16 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_lv1_0 = exitcond_fu_407_p2))) then
                    tmp_6_reg_685(16 downto 0) <= tmp_6_fu_419_p1(16 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_reg_676))) then
                val1_reg_703 <= frame1_q0;
                val2_reg_710 <= frame2_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it5))) then
                val3_reg_731 <= frame3_q0;
            end if;
        end if;
    end process;
    tmp_6_reg_685(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it1(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it2(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it3(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it4(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it5(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it6(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it7(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it8(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it9(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it10(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it11(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it12(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it13(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it14(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it15(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it16(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it17(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it18(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it19(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it20(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it21(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it22(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_685_pp1_it23(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    tmp_4_reg_806(63 downto 17) <= "00000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, gmem_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_259, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, init_read_reg_638, ap_sig_ioackin_gmem_ARREADY, exitcond8_fu_390_p2, exitcond_fu_407_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it23, ap_reg_ppiten_pp1_it24, exitcond1_fu_600_p2, ap_reg_ppiten_pp2_it0, ap_sig_ioackin_gmem_AWREADY, exitcond2_fu_621_p2, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond2_reg_823_pp3_it1, ap_sig_ioackin_gmem_WREADY, ap_reg_ppiten_pp3_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
            when ap_ST_pp0_stg0_fsm_8 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond8_fu_390_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond8_fu_390_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
                end if;
            when ap_ST_st12_fsm_9 => 
                if (not((ap_const_lv1_0 = init_read_reg_638))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_10;
                end if;
            when ap_ST_pp1_stg0_fsm_10 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it24) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it23)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_fu_407_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_10;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_fu_407_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_12;
                end if;
            when ap_ST_pp2_stg0_fsm_11 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = exitcond1_fu_600_p2))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_12;
                end if;
            when ap_ST_st40_fsm_12 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_12;
                end if;
            when ap_ST_pp3_stg0_fsm_13 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond2_fu_621_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_13;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond2_fu_621_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_13;
                end if;
            when ap_ST_st44_fsm_14 => 
                ap_NS_fsm <= ap_ST_st45_fsm_15;
            when ap_ST_st45_fsm_15 => 
                ap_NS_fsm <= ap_ST_st46_fsm_16;
            when ap_ST_st46_fsm_16 => 
                ap_NS_fsm <= ap_ST_st47_fsm_17;
            when ap_ST_st47_fsm_17 => 
                ap_NS_fsm <= ap_ST_st48_fsm_18;
            when ap_ST_st48_fsm_18 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    abs_fu_578_p3 <= 
        tmp_19_fu_560_p2 when (abscond_fu_572_p2(0) = '1') else 
        neg_fu_566_p2;
    abscond_fu_572_p2 <= "1" when (signed(tmp_19_fu_560_p2) > signed(ap_const_lv9_0)) else "0";

    -- ap_done assign process. --
    ap_done_assign_proc : process(gmem_BVALID, ap_sig_cseq_ST_st48_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_18) and not((gmem_BVALID = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(gmem_BVALID, ap_sig_cseq_ST_st48_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_18) and not((gmem_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_250 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(gmem_RVALID, exitcond8_reg_662)
    begin
                ap_sig_bdd_259 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond8_reg_662 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_289 assign process. --
    ap_sig_bdd_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_289 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_314 assign process. --
    ap_sig_bdd_314_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_314 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_37 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_556 assign process. --
    ap_sig_bdd_556_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_556 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_578 assign process. --
    ap_sig_bdd_578_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_578 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_591 assign process. --
    ap_sig_bdd_591_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_591 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_629 assign process. --
    ap_sig_bdd_629_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_629 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_636 assign process. --
    ap_sig_bdd_636_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_636 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_648 assign process. --
    ap_sig_bdd_648_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_648 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_737 assign process. --
    ap_sig_bdd_737_assign_proc : process(ap_reg_ppstg_exitcond2_reg_823_pp3_it1, ap_reg_ppiten_pp3_it2)
    begin
                ap_sig_bdd_737 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2));
    end process;


    -- ap_sig_bdd_767 assign process. --
    ap_sig_bdd_767_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_767 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_8_assign_proc : process(ap_sig_bdd_250)
    begin
        if (ap_sig_bdd_250) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_10 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_10_assign_proc : process(ap_sig_bdd_314)
    begin
        if (ap_sig_bdd_314) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_11 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_11_assign_proc : process(ap_sig_bdd_556)
    begin
        if (ap_sig_bdd_556) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_13 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_13_assign_proc : process(ap_sig_bdd_591)
    begin
        if (ap_sig_bdd_591) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_9 assign process. --
    ap_sig_cseq_ST_st12_fsm_9_assign_proc : process(ap_sig_bdd_648)
    begin
        if (ap_sig_bdd_648) then 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_289)
    begin
        if (ap_sig_bdd_289) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_12 assign process. --
    ap_sig_cseq_ST_st40_fsm_12_assign_proc : process(ap_sig_bdd_578)
    begin
        if (ap_sig_bdd_578) then 
            ap_sig_cseq_ST_st40_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_14 assign process. --
    ap_sig_cseq_ST_st44_fsm_14_assign_proc : process(ap_sig_bdd_629)
    begin
        if (ap_sig_bdd_629) then 
            ap_sig_cseq_ST_st44_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_18 assign process. --
    ap_sig_cseq_ST_st48_fsm_18_assign_proc : process(ap_sig_bdd_767)
    begin
        if (ap_sig_bdd_767) then 
            ap_sig_cseq_ST_st48_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_636)
    begin
        if (ap_sig_bdd_636) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_ARREADY assign process. --
    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_AWREADY assign process. --
    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_WREADY assign process. --
    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    backsub_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    backsub_CRTL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    backsub_gmem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond1_fu_600_p2 <= "1" when (i_reg_319 = ap_const_lv17_12C00) else "0";
    exitcond2_fu_621_p2 <= "1" when (indvar1_reg_330 = ap_const_lv17_12C00) else "0";
    exitcond8_fu_390_p2 <= "1" when (indvar_phi_fu_300_p4 = ap_const_lv17_12C00) else "0";
    exitcond_fu_407_p2 <= "1" when (i1_reg_308 = ap_const_lv17_12C00) else "0";

    -- frame1_address0 assign process. --
    frame1_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it0, tmp_6_fu_419_p1, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it0, tmp_4_fu_612_p1, tmp_s_fu_402_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            frame1_address0 <= tmp_s_fu_402_p1(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            frame1_address0 <= tmp_4_fu_612_p1(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            frame1_address0 <= tmp_6_fu_419_p1(17 - 1 downto 0);
        else 
            frame1_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- frame1_ce0 assign process. --
    frame1_ce0_assign_proc : process(ap_sig_bdd_259, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            frame1_ce0 <= ap_const_logic_1;
        else 
            frame1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame1_d0 <= gmem_addr_1_read_reg_671;

    -- frame1_we0 assign process. --
    frame1_we0_assign_proc : process(ap_sig_bdd_259, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond8_reg_662_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_662_pp0_it1)))) then 
            frame1_we0 <= ap_const_logic_1;
        else 
            frame1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- frame2_address0 assign process. --
    frame2_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it0, tmp_6_fu_419_p1, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_4_reg_806)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            frame2_address0 <= tmp_4_reg_806(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            frame2_address0 <= tmp_6_fu_419_p1(17 - 1 downto 0);
        else 
            frame2_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    frame2_address1 <= ap_reg_ppstg_tmp_6_reg_685_pp1_it22(17 - 1 downto 0);

    -- frame2_ce0 assign process. --
    frame2_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_10, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_10) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then 
            frame2_ce0 <= ap_const_logic_1;
        else 
            frame2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- frame2_ce1 assign process. --
    frame2_ce1_assign_proc : process(ap_reg_ppiten_pp1_it23)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it23)) then 
            frame2_ce1 <= ap_const_logic_1;
        else 
            frame2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    frame2_d0 <= frame1_q0;
    frame2_d1 <= ap_reg_ppstg_val1_reg_703_pp1_it22;

    -- frame2_we0 assign process. --
    frame2_we0_assign_proc : process(exitcond1_reg_797, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond1_reg_797)))) then 
            frame2_we0 <= ap_const_logic_1;
        else 
            frame2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- frame2_we1 assign process. --
    frame2_we1_assign_proc : process(ap_reg_ppiten_pp1_it23, ap_reg_ppstg_exitcond_reg_676_pp1_it22)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it23) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it22)))) then 
            frame2_we1 <= ap_const_logic_1;
        else 
            frame2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- frame3_address0 assign process. --
    frame3_address0_assign_proc : process(ap_reg_ppiten_pp1_it5, ap_reg_ppstg_tmp_6_reg_685_pp1_it4, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_4_reg_806)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            frame3_address0 <= tmp_4_reg_806(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it5)) then 
            frame3_address0 <= ap_reg_ppstg_tmp_6_reg_685_pp1_it4(17 - 1 downto 0);
        else 
            frame3_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    frame3_address1 <= ap_reg_ppstg_tmp_6_reg_685_pp1_it5(17 - 1 downto 0);

    -- frame3_ce0 assign process. --
    frame3_ce0_assign_proc : process(ap_reg_ppiten_pp1_it5, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then 
            frame3_ce0 <= ap_const_logic_1;
        else 
            frame3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- frame3_ce1 assign process. --
    frame3_ce1_assign_proc : process(ap_reg_ppiten_pp1_it6)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it6)) then 
            frame3_ce1 <= ap_const_logic_1;
        else 
            frame3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    frame3_d0 <= frame1_q0;
    frame3_d1 <= ap_reg_ppstg_val2_reg_710_pp1_it5;

    -- frame3_we0 assign process. --
    frame3_we0_assign_proc : process(exitcond1_reg_797, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond1_reg_797)))) then 
            frame3_we0 <= ap_const_logic_1;
        else 
            frame3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- frame3_we1 assign process. --
    frame3_we1_assign_proc : process(ap_reg_ppiten_pp1_it6, ap_reg_ppstg_exitcond_reg_676_pp1_it5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it5)))) then 
            frame3_we1 <= ap_const_logic_1;
        else 
            frame3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    gmem_ARADDR <= grp_fu_373_p2;
    gmem_ARBURST <= ap_const_lv2_0;
    gmem_ARCACHE <= ap_const_lv4_0;
    gmem_ARID <= ap_const_lv1_0;
    gmem_ARLEN <= ap_const_lv32_12C00;
    gmem_ARLOCK <= ap_const_lv2_0;
    gmem_ARPROT <= ap_const_lv3_0;
    gmem_ARQOS <= ap_const_lv4_0;
    gmem_ARREGION <= ap_const_lv4_0;
    gmem_ARSIZE <= ap_const_lv3_0;
    gmem_ARUSER <= ap_const_lv1_0;

    -- gmem_ARVALID assign process. --
    gmem_ARVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWADDR <= grp_fu_380_p2;
    gmem_AWBURST <= ap_const_lv2_0;
    gmem_AWCACHE <= ap_const_lv4_0;
    gmem_AWID <= ap_const_lv1_0;
    gmem_AWLEN <= ap_const_lv32_12C00;
    gmem_AWLOCK <= ap_const_lv2_0;
    gmem_AWPROT <= ap_const_lv3_0;
    gmem_AWQOS <= ap_const_lv4_0;
    gmem_AWREGION <= ap_const_lv4_0;
    gmem_AWSIZE <= ap_const_lv3_0;
    gmem_AWUSER <= ap_const_lv1_0;

    -- gmem_AWVALID assign process. --
    gmem_AWVALID_assign_proc : process(ap_sig_cseq_ST_st40_fsm_12, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_BREADY assign process. --
    gmem_BREADY_assign_proc : process(gmem_BVALID, ap_sig_cseq_ST_st48_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_18) and not((gmem_BVALID = ap_const_logic_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_RREADY assign process. --
    gmem_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_8, exitcond8_reg_662, ap_sig_bdd_259, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond8_reg_662 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_259 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_WDATA <= out_load_reg_837;
    gmem_WID <= ap_const_lv1_0;
    gmem_WLAST <= ap_const_logic_0;
    gmem_WSTRB <= ap_const_lv1_1;
    gmem_WUSER <= ap_const_lv1_0;

    -- gmem_WVALID assign process. --
    gmem_WVALID_assign_proc : process(ap_reg_ppstg_exitcond2_reg_823_pp3_it1, ap_reg_ppiten_pp3_it2, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_341_ce <= ap_const_logic_1;
    grp_fu_345_ce <= ap_const_logic_1;
    grp_fu_349_ce <= ap_const_logic_1;
    grp_fu_354_ce <= ap_const_logic_1;
    grp_fu_359_ce <= ap_const_logic_1;
    grp_fu_364_ce <= ap_const_logic_1;
    grp_fu_364_p0 <= std_logic_vector(resize(unsigned(val1_reg_703),32));
    grp_fu_367_ce <= ap_const_logic_1;
    grp_fu_367_p0 <= std_logic_vector(resize(unsigned(val2_reg_710),32));
    grp_fu_370_ce <= ap_const_logic_1;
    grp_fu_370_p0 <= std_logic_vector(resize(unsigned(val3_reg_731),32));

    -- grp_fu_373_p2 assign process. --
    grp_fu_373_p2_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_8, exitcond8_reg_662, ap_reg_ppiten_pp0_it1, tmp_17_fu_386_p1, tmp_17_reg_652, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond8_reg_662 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_373_p2 <= tmp_17_reg_652(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_373_p2 <= tmp_17_fu_386_p1(32 - 1 downto 0);
        else 
            grp_fu_373_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_380_p2 assign process. --
    grp_fu_380_p2_assign_proc : process(tmp_18_fu_617_p1, tmp_18_reg_818, ap_sig_cseq_ST_st40_fsm_12, ap_reg_ppstg_exitcond2_reg_823_pp3_it1, ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_st44_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_14) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))) then 
            grp_fu_380_p2 <= tmp_18_reg_818(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_12)) then 
            grp_fu_380_p2 <= tmp_18_fu_617_p1(32 - 1 downto 0);
        else 
            grp_fu_380_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_606_p2 <= std_logic_vector(unsigned(i_reg_319) + unsigned(ap_const_lv17_1));
    i_2_fu_413_p2 <= std_logic_vector(unsigned(i1_reg_308) + unsigned(ap_const_lv17_1));
    indvar_next1_fu_627_p2 <= std_logic_vector(unsigned(indvar1_reg_330) + unsigned(ap_const_lv17_1));
    indvar_next_fu_396_p2 <= std_logic_vector(unsigned(indvar_phi_fu_300_p4) + unsigned(ap_const_lv17_1));

    -- indvar_phi_fu_300_p4 assign process. --
    indvar_phi_fu_300_p4_assign_proc : process(indvar_reg_296, ap_sig_cseq_ST_pp0_stg0_fsm_8, exitcond8_reg_662, ap_reg_ppiten_pp0_it1, indvar_next_reg_666)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond8_reg_662 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_300_p4 <= indvar_next_reg_666;
        else 
            indvar_phi_fu_300_p4 <= indvar_reg_296;
        end if; 
    end process;

    init_read_read_fu_152_p2 <= (0=>init, others=>'-');
    isNeg_fu_475_p3 <= sh_assign_fu_469_p2(8 downto 8);
    loc_V_1_fu_451_p1 <= p_Val2_s_fu_437_p1(23 - 1 downto 0);
    neg_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_19_fu_560_p2));
    not_tmp_s_fu_586_p2 <= "1" when (signed(abs_fu_578_p3) > signed(ap_const_lv9_1D)) else "0";

    -- out_address0 assign process. --
    out_address0_assign_proc : process(ap_reg_ppiten_pp1_it24, ap_reg_ppstg_tmp_6_reg_685_pp1_it23, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, tmp_4_reg_806, ap_sig_cseq_ST_pp3_stg0_fsm_13, ap_reg_ppiten_pp3_it0, tmp_21_fu_633_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            out_address0 <= tmp_4_reg_806(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it24)) then 
            out_address0 <= ap_reg_ppstg_tmp_6_reg_685_pp1_it23(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            out_address0 <= tmp_21_fu_633_p1(17 - 1 downto 0);
        else 
            out_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- out_ce0 assign process. --
    out_ce0_assign_proc : process(ap_reg_ppiten_pp1_it24, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, ap_sig_cseq_ST_pp3_stg0_fsm_13, ap_reg_ppiten_pp3_it0, ap_reg_ppstg_exitcond2_reg_823_pp3_it1, ap_sig_ioackin_gmem_WREADY, ap_reg_ppiten_pp3_it2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it24) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_823_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- out_d0 assign process. --
    out_d0_assign_proc : process(ap_reg_ppiten_pp1_it24, frame1_q0, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1, p_cast_fu_592_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            out_d0 <= frame1_q0;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it24)) then 
            out_d0 <= p_cast_fu_592_p3;
        else 
            out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- out_we0 assign process. --
    out_we0_assign_proc : process(ap_reg_ppiten_pp1_it24, ap_reg_ppstg_exitcond_reg_676_pp1_it23, exitcond1_reg_797, ap_sig_cseq_ST_pp2_stg0_fsm_11, ap_reg_ppiten_pp2_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it24) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_676_pp1_it23)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond1_reg_797)))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_455_p3 <= (ap_const_lv1_1 & loc_V_1_reg_782);
    p_Val2_s_fu_437_p1 <= grp_fu_345_p2;
    p_cast_fu_592_p3 <= 
        ap_const_lv8_FF when (not_tmp_s_reg_792(0) = '1') else 
        ap_const_lv8_0;
    result_V_fu_546_p3 <= 
        tmp_20_fu_532_p1 when (isNeg_fu_475_p3(0) = '1') else 
        tmp_22_fu_536_p4;
        sh_assign_1_cast_cast_fu_504_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_492_p3),24));

        sh_assign_1_cast_fu_500_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_492_p3),32));

    sh_assign_1_fu_492_p3 <= 
        tmp_4_i_i_cast_fu_488_p1 when (isNeg_fu_475_p3(0) = '1') else 
        sh_assign_fu_469_p2;
    sh_assign_fu_469_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast2_fu_466_p1));
        tmp_17_fu_386_p1 <= std_logic_vector(resize(signed(frame_in_read_reg_647),64));

    tmp_18_cast_fu_557_p1 <= std_logic_vector(resize(unsigned(result_V_reg_787),9));
        tmp_18_fu_617_p1 <= std_logic_vector(resize(signed(frame_out_read_reg_642),64));

    tmp_19_fu_560_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_554_p1) - unsigned(tmp_18_cast_fu_557_p1));
    tmp_20_fu_532_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_524_p3),8));
    tmp_21_fu_633_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_330),64));
    tmp_22_fu_536_p4 <= tmp_9_i_i_fu_518_p2(30 downto 23);
    tmp_25_fu_524_p3 <= tmp_7_i_i_fu_512_p2(23 downto 23);
    tmp_2_i_i_fu_462_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_455_p3),54));
    tmp_4_fu_612_p1 <= std_logic_vector(resize(unsigned(i_reg_319),64));
        tmp_4_i_i_cast_fu_488_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_483_p2),9));

    tmp_4_i_i_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_reg_776));
    tmp_6_fu_419_p1 <= std_logic_vector(resize(unsigned(i1_reg_308),64));
    tmp_6_i_i_fu_508_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_500_p1),54));
    tmp_7_cast_fu_554_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_val1_reg_703_pp1_it22),9));
    tmp_7_i_i_fu_512_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_455_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_504_p1(24-1 downto 0)))));
    tmp_9_i_i_fu_518_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_462_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_508_p1(31-1 downto 0)))));
    tmp_i_i_i_cast2_fu_466_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_776),9));
    tmp_s_fu_402_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_296_pp0_it1),64));
end behav;
